#!/usr/bin/env ruby

require 'csv'
require 'active_record'
require 'thor'
require 'tmpdir'

class ShopifyToolkit::CommandLine < Thor
  RESERVED_COLUMN_NAMES = %w[select type id]

  class Result < ActiveRecord::Base
    def self.comments
      distinct.pluck(:import_comment)
    end

    def self.with_comment(text)
      where("import_comment LIKE ?", "%#{text}%")
    end
  end

  desc "analyze CSV_PATH", "Analyze results file at path CSV_PATH"
  method_option :force_import, type: :boolean, default: false
  method_option :tmp_dir, type: :string, default: Dir.tmpdir
  def analyze(csv_path)
    csv_path = File.expand_path(csv_path)
    underscore = ->(string) { string.downcase.gsub(/[^a-z0-9]+/, "_").gsub(/(^_+|_+$)/, "") }
    csv = CSV.open(csv_path, liberal_parsing:true )
    header_to_column = -> { RESERVED_COLUMN_NAMES.include?(_1.to_s) ? "#{_1}_1" : _1 }
    headers = csv.shift.map(&underscore).map(&header_to_column)
    basename = File.basename csv_path
    database = "#{options[:tmp_dir]}/shopify-toolkit-analyze-#{underscore[basename]}.sqlite3"
    should_import = options[:force_import] || !File.exist?(database)
    to_record = ->(row) { headers.zip(row.each{ |c| c.delete!("\u0000") if String === c }).to_h.transform_keys(&header_to_column) }

    File.delete(database) if should_import && File.exist?(database)

    ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database:)

    if should_import
      puts "==> Importing #{csv_path} into #{database}"
      ActiveRecord::Schema.define do
        create_table :results, force: true do |t|
          t.json :data
          headers.each { |header| t.string header }
        end
        add_index :results, :import_result if headers.include?('import_result')
      end
      csv.each_slice(5000) { |rows| print "."; Result.insert_all(rows.map(&to_record)) }
      puts
    end

    puts "==> Starting console for #{basename}"
    require "irb"
    IRB.conf[:IRB_NAME] = basename
    Result.class_eval { binding.irb(show_code: false) }
  end
end

ShopifyToolkit::CommandLine.start(ARGV)
